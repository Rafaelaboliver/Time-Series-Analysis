{\rtf1\ansi\ansicpg1252\cocoartf2759
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww9540\viewh19680\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 from sklearn.linear_model import LinearRegression\
from sklearn.decomposition import FastICA\
from pandas import DataFrame, Series\
import matplotlib.pylab as plt\
import pandas as pd\
import numpy as np\
import datetime\
\
%matplotlib inline\
np.set_printoptions(precision=3 , suppress= True)\
\
#importing the file and defining the columns I am going to work with:\
filePath = './canv.txt'\
columnsName = ['YYMMMDD', '__east(m)', '_north(m)', '____up(m)', 'sig_e(m)', 'sig_n(m)', 'sig_u(m)']\
site = pd.read_csv(filePath, usecols = columnsName, delimiter = '\\s+')\
site\
\
#removing outliers from the time series:\
limiarZ = 3.0\
detrendedNoOutliers = siteDetrended[(np.abs(siteDetrended-siteDetrended.mean()) \
                                              < limiarZ*siteDetrended.std()).all(axis=1)]\
#changing from 'meters' to 'milimeters':\
detrendedNoOutliers_mm = detrendedNoOutliers*1000\
\
#renaming the columns names:\
detrendedNoOutliers_mm = detrendedNoOutliers_mm.rename(columns=\{'__east(m)': 'east(mm)', '_north(m)': 'north(mm)', '____up(m)': 'up(mm)', \
                                       'sig_e(m)': 'sig_e(mm)', 'sig_n(m)': 'sig_n(mm)', 'sig_u(m)': 'sig_u(mm)'\})\
detrendedNoOutliers_mm\
\
x = np.arange(len(detrendedNoOutliers_mm)).reshape(-1,1)\
\
#linear trend - east\
yE = detrendedNoOutliers_mm['east(mm)'].values.reshape(-1,1)\
linearModelE = LinearRegression().fit(x,yE)\
regressionLineE = linearModelE.predict(x)\
\
#linear trend - north\
yN = detrendedNoOutliers_mm['north(mm)'].values.reshape(-1,1)\
linearModelN = LinearRegression().fit(x,yN)\
regressionLineN = linearModelN.predict(x)\
\
#linear trend - up\
yU = detrendedNoOutliers_mm['up(mm)'].values.reshape(-1,1)\
linearModelU = LinearRegression().fit(x,yU)\
regressionLineU = linearModelU.predict(x)\
\
#east\
plt.plot(detrendedNoOutliers_mm.index,detrendedNoOutliers_mm['east(mm)'], '.', markersize=3)\
plt.plot(detrendedNoOutliers_mm.index, regressionLineE, color = 'red', label = 'Linear Trend')\
plt.title('ROVR')\
plt.xlabel('Time')\
plt.xticks(fontsize=8)\
plt.ylabel('East(mm)')\
plt.yticks(fontsize=8)\
plt.show()\
\
\
#north\
plt.plot(detrendedNoOutliers_mm.index, detrendedNoOutliers_mm['north(mm)'], '.', markersize=3)\
plt.plot(detrendedNoOutliers_mm.index, regressionLineN, color = 'red', label = 'Linear Trend')\
plt.title('ROVR')\
plt.xlabel('Time')\
plt.xticks(fontsize=8)\
plt.ylabel('North(mm)')\
plt.yticks(fontsize=8)\
plt.show()\
\
#up:\
plt.plot(detrendedNoOutliers_mm.index, detrendedNoOutliers_mm['up(mm)'], '.', markersize=5)\
plt.plot(detrendedNoOutliers_mm.index, regressionLineU, color = 'red', label = 'Linear Trend')\
plt.title('ROVR')\
plt.xlabel('Time')\
plt.xticks(fontsize=8)\
plt.ylabel('Up(mm)')\
plt.yticks(fontsize=8)\
plt.show()}